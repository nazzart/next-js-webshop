// first, import the Prisma client to access Prisma methods
const { PrismaClient } = require("@prisma/client");
// initialize the Prisma client for the application
const prisma = new PrismaClient();

// create an asynchronous main function
async function main() {
  // connect to the database using Prisma connect() method
  await prisma.$connect();

  // using the Prisma create() method, add data based on the model fields
  // Note: other fields as autogenerated, and no need to specify them here
  await prisma.car.create({
    data: {
      brand: "Audi",
      model: "A4",
      seoTitle: "Audi A4 Quattro",
      seoUrl: "/products/audi-a4-quattro",
      imageUrl: "https://placehold.co/800x600/?text=Car+Photo",
      price: 35,
      attributes: {
        connect: [{ id: 2 }, { id: 3 }, { id: 5 }, { id: 6 }, {id: 7}, {id: 13}],
      },
    },
  });

  await prisma.car.create({
    data: {
      brand: "Bmw",
      model: "320d",
      seoTitle: "Bmw 320d Xdrive",
      seoUrl: "/products/bmw-320-xdrive",
      imageUrl: "https://placehold.co/800x600/?text=Car+Photo",
      price: 45,
      attributes: {
        connect: [{ id: 2 }, { id: 4 }, { id: 5 }, { id: 6 }, {id: 7}, {id: 13}],
      },
    },
  });

  await prisma.car.create({
    data: {
      brand: "Opel",
      model: "Corsa",
      seoTitle: "Opel Corsa 1.6e",
      seoUrl: "/products/opel-corsa",
      imageUrl: "https://placehold.co/800x600/?text=Car+Photo",
      price: 28,
      attributes: {
        connect: [{ id: 1 }, { id: 3 }, { id: 5 }, { id: 6 }, {id: 9}, {id: 11}],
      },
    },
  });

  await prisma.car.create({
    data: {
      brand: "Volkswagen",
      model: "Golf",
      seoTitle: "Volkswagen Golf Variant",
      seoUrl: "/products/volkswagen-golf-variant",
      imageUrl: "https://placehold.co/800x600/?text=Car+Photo",
      price: 30,
      attributes: {
        connect: [{ id: 1 }, { id: 4 }, { id: 5 }, { id: 6 }, {id: 9}, {id: 11}],
      },
    },
  });

  await prisma.car.create({
    data: {
      brand: "Audi",
      model: "A6",
      seoTitle: "Audi a6 biTdi 320hp",
      seoUrl: "/products/audi-a6-bitdi-320hp",
      imageUrl: "https://placehold.co/800x600/?text=Car+Photo",
      price: 55,
      attributes: {
        connect: [{ id: 2 }, { id: 4 }, { id: 5 }, { id: 6 }, {id: 7}, {id: 13}],
      },
    },
  });

  await prisma.car.create({
    data: {
      brand: "Mercedes",
      model: "Benz",
      seoTitle: "Mercedes Benz Coupe AMG",
      seoUrl: "/products/mercedes-benz-coupe",
      imageUrl: "https://placehold.co/800x600/?text=Car+Photo",
      price: 65,
      attributes: {
        connect: [{ id: 2 }, { id: 4 }, { id: 5 }, { id: 6 }, {id: 8}, {id: 13}],
      },
    },
  });

  await prisma.car.create({
    data: {
      brand: "Hummer",
      model: "H2",
      seoTitle: "Hummer H2 4X4",
      seoUrl: "/products/hummer-h2-4x4",
      imageUrl: "https://placehold.co/800x600/?text=Car+Photo",
      price: 85,
      attributes: {
        connect: [{ id: 1 }, { id: 4 }, { id: 5 }, { id: 6 }, {id: 7}, {id: 12}],
      },
    },
  });

  // you can find the added fields using findMany() method
  const cars = await prisma.car.findMany();

  // log these added fields to the console
  console.dir(cars, {
    depth: Infinity,
  });
}

main()
  // catch any erroes
  .catch(console.error)
  // disconnect the prisma client once all processes are executed
  .finally(() => prisma.$disconnect());
